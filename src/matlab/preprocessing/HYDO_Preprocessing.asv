% Preprocessing pipeline Hypothalamic Sleep Project
% Author: Max Harkotte (maximilian.harkotte@gmail.com)
% last updated: July 2024

% Takes in raw data and outputs downsampled EEG/EMG and downsampled +
% re-referenced LFP

clear 
close all
clc          

%% Paths
script_path = which('HYDO_Preprocessing.m');
file_server_path = 'Z:/'; % cluster: '/gpfs01/born/animal/'; 

% Paths to toolboxes and functions
addpath(strcat(file_server_path, 'Hypothalamic_Sleep/fieldtrip/fieldtrip-20240722')); 
ft_defaults

%% Recording information
reference = readtable(strcat(file_server_path, 'Hypothalamic_Sleep/data/raw/reference.xlsx'));

%% Select recordings for preprocessing 
selection             = {'2024-05-21_10-28-00', '2024-07-22_10-47-00'};    

%% Preprocessing
% Prepare .edf file to write data to 
cfg            = [];
cfg.dataset    = strcat(strcat(file_server_path, 'Hypothalamic_Sleep/data/edfexample/Osas2002.edf')); % change dir to local if needed
cfg.continuous = 'yes';
cfg.channel    = 'EEG Fpz-M2';
ft_dummy_dat   = ft_preprocessing(cfg); 

% preprocess recordings 
for iRec = 1:size(selection,2)

    % Recording information
    rec_info = reference(strcmp(reference.file, selection(iRec)), :);
    elecs = dir(fullfile(char(strcat(file_server_path, 'Hypothalamic_Sleep/data/raw/', rec_info.id, '/', rec_info.file, '/')),  '*.ncs'));
    elecs = {elecs.name}';
    elecs = erase(elecs, '.ncs');

    % Read in EEG and EMG 
    EEGEMG_chans = startsWith(elecs, 'E');
    EEGEMG_chans = elecs(EEGEMG_chans);

    for iChan = 1:size(EEGEMG_chans, 1)
        % read in data 
        cfgp         = [];
        cfgp.dataset = char(strcat(file_server_path, 'Hypothalamic_Sleep/data/raw/', rec_info.id, '/', rec_info.file, '/'));
        cfgp.channel = EEGEMG_chans(iChan);
        datp         = ft_preprocessing(cfgp);
    
        % Downsample to 250 Hz 
        cfgr            = [];
        cfgr.resamplefs = 250;
        datr{iChan}     = ft_resampledata(cfgr, datp);

        clear datp;
    end

    cfg               = [];
    EEGEMG_downsample = ft_appenddata(cfg, datr{:}); % this expands all cells into input variables

    clear datr; 

    % Read in LFP
    Probe_chans = startsWith(elecs, 'P');
    Probe_chans = elecs(Probe_chans);

    for iChan = 1:size(Probe_chans, 1)
        % read in data 
        cfgp         = [];
        cfgp.dataset = char(strcat(file_server_path, 'Hypothalamic_Sleep/data/raw/', rec_info.id, '/', rec_info.file, '/'));
        cfgp.channel = Probe_chans(iChan);
        datp         = ft_preprocessing(cfgp);
    
        % Downsample to 250 Hz 
        cfgr            = [];
        cfgr.resamplefs = 250;
        datr{iChan}     = ft_resampledata(cfgr, datp);

        clear datp;
    end

    cfg               = [];
    LFP_downsample = ft_appenddata(cfg, datr{:}); % this expands all cells into input variables

    clear datr; 

    % Re-reference channels of Probe 
    cfg = [];
    cfg.channel = 'all'; 
    cfg.reref = 'yes';
    cfg.refmethod = 'avg';
    cfg.refchannel = 'all';
    LFP_reref = ft_preprocessing(cfg, Probe_downsample);

    % Write data as .edf file 

    
    



end


    fns = fieldnames(Downsampled_dat);
fns = sort(fns);
Downsampled_dat_clean = Downsampled_dat.(fns{1});

 for iCh = 2:size(fns,1)
 Downsampled_dat_clean.trial = {vertcat(Downsampled_dat_clean.trial{1,1}, Downsampled_dat.(fns{iCh}).trial{1,1})}; 
 Downsampled_dat_clean.label = vertcat(Downsampled_dat_clean.label, Downsampled_dat.(fns{iCh}).label); 
 end
 
% construct header 
Downsampled_dat_clean.hdr.Fs            = Downsampled_dat_clean.fsample;
Downsampled_dat_clean.hdr.label         = Downsampled_dat_clean.label; 
Downsampled_dat_clean.hdr.nChans        = size(Downsampled_dat_clean.label,1);
Downsampled_dat_clean.hdr.nTrials       = 1;
Downsampled_dat_clean.hdr.nSamplesPre   = 0;
Downsampled_dat_clean.hdr.nSamples      = size(Downsampled_dat_clean.time{1,1},2);
Downsampled_dat_clean.hdr.chantype      = labels;
units                                   = cell(size(labels,1), 1);
units(:)                                = {'uV'};
Downsampled_dat_clean.hdr.chanunit      = units;

hdr                                     = ft_fetch_header(Downsampled_dat_clean);

% write .edf files 
if ~exist(strcat(serv_connect, dirProject, dirAnalysis, '02_Data/01_Downsampled_data/', rec_ID_oe, '/', rec_ID_oe),'dir')
    mkdir(strcat(serv_connect, dirProject, dirAnalysis, '02_Data/01_Downsampled_data/', rec_ID_oe, '/', rec_ID_oe))
end

cd(strcat(serv_connect, dirProject, dirAnalysis, '02_Data/01_Downsampled_data/', rec_ID_oe, '/', rec_ID_oe)) % change dir to local if needed

file_name = strcat(char(rec_info.Animal), '-', char(rec_info.Condition), '-', char(rec_info.StimProtocol));

ft_write_data(strcat(file_name, '.edf') ...
    , Downsampled_dat_clean.trial{1}, 'header', hdr,'chaninx', Downsampled_dat_clean.label', 'dataformat', "edf")


